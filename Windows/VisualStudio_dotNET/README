These directories contain the Visual Studio version of NewIpopt.  They
have been created with Microsoft Visual C++ .NET 2003 and Intel
Fortran 8.0.

Before opening the files in your Visual Studio, first make sure that
the following third party source files are present (after you got them
from netlib and Harwell):

NewIpopt/OTHERS/HSL/ma27ad.f
NewIpopt/OTHERS/blas/dasum.f
NewIpopt/OTHERS/blas/daxpy.f
NewIpopt/OTHERS/blas/dcopy.f
NewIpopt/OTHERS/blas/ddot.f
NewIpopt/OTHERS/blas/dnrm2.f
NewIpopt/OTHERS/blas/dscal.f
NewIpopt/OTHERS/blas/idamax.

Then open the solution file

NewIpopt/VisualStudio/NewIpopt.sln

This solution compiles both the Fortran example problem
and the C++ example problem. You should be able to base
your development off of one of these examples.


Here are some helpful notes if you are building a new C++ project.
- The project type used for the example was "Win32 Console" (Not .NET Console!)

- Precompiled headers were turned off:
	Project Properties | C/C++ | Precompiled-Headers | Create/Use Precompiled Headers = "Not Using Precompiled Headers"

- You will need to add the include directories to your C++ project
	you can copy these from the NewIpopt project:
	Project Properties | C/C++ | General | Additional Include Directories = <copy from NewIpopt>

- You must ensure that the run-time libraries between FortranLinAlg and the C++ project are 
	compatible. Look at the "Mixed Language" area of the Intel Fortran compiler html help for
	a table of compatible settings (look for something about consistent run-time libraries in help)
	These are set by:
	1) for the C++ project
		Project Properties | C/C++ | Code Generation | Runtime Library
	2) for the Fortran project
		FortranLinAlg Properties | Fortran | Libraries | Runtime Library

- You must add the Fortran compiler LIB path to the C++ project
	This is something like "C:\Program Files\Intel\Fortran\compiler80\IA32\LIB":
	Project Properties | Linker | General | Additional Library Directories = <LIB path>
		
