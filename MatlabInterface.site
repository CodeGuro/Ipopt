# MatlabInterface.site
# This is a config.site file to set appropriate flags for
# building the Matlab Mex interface to Ipopt. Usage:
# (assuming build directory is one level below configure)
# ../configure CONFIG_SITE=$PWD/../MatlabInterface.site \
#   --with-matlab-home=<output of matlabroot command in matlab> \
#   CC=<location of C compiler> CXX=<location of C++ compiler> \
#   F77=<location of Fortran compiler>
# Ipopt configure will look for matlab on the path if you don't
# specify --with-matlab-home. If the following command:
# which matlab && ls -l $(which matlab)
# does not point to the version of Matlab you want, you need
# to provide the correct path in --with-matlab-home.
# Ipopt configure will choose CC, CXX, and F77 automatically
# if you do not specify them. If the g++ or user-specified CXX
# compiler is capable of statically linking libstdc++ (and the
# libgfortran.a of gfortran or the user-specified F77 compiler)
# into a shared library (4.5 or newer on Mac or Windows,
# 4.7.3 or newer built --with-pic on Linux) then this script
# will set up the Ipopt Matlab interface with all standard
# libraries statically linked. This way the same mex file
# should be usable across multiple versions of Matlab.
# If this causes any problems you can disable this behavior
# by setting the flag --disable-matlab-static to configure.
#
# If you also specify --enable-matlab-ma57 in your configure call,
# this file will set appropriate flags to use Matlab's MA57 library.
# Note that when using Matlab's MA57, standalone Ipopt executables
# (such as from "make test") require setting the environment variable
# LD_LIBRARY_PATH=$MATLAB_HOME/bin/$ARCH:$MATLAB_HOME/sys/os/$ARCH
# (DYLD_LIBRARY_PATH=$MATLAB_HOME/bin/$ARCH on Mac OS X) where $ARCH
# is one of glnxa64, maci64, win32, win64, etc, in order to properly
# work. If you're using a compiler version that doesn't match Matlab's
# (see http://www.mathworks.com/support/sysreq/previous_releases.html)
# then you should compile the mex file *before* setting LD_LIBRARY_PATH,
# otherwise the mex file may end up with conflicting standard libraries.

# First set the recommended flags for Matlab interface compilation
if test x"$enable_shared" != xyes; then
  enable_shared=no
fi
if test x"$with_pic" != xno; then
  with_pic=yes
fi
if test -z "$with_blas"; then
  with_blas=BUILD
fi
if test -z "$with_lapack"; then
  with_lapack=BUILD
fi

# Unless user specified --enable-matlab-static (or disable), test
# if we can statically link standard libraries into a shared lib
if test -z "$enable_matlab_static"; then
  cxxtemp=$CXX
  f77temp=$F77
  # shortcut: if CXX and F77 not specified, assume g++ and gfortran
  if test -z "$cxxtemp"; then
    cxxtemp=g++
  fi
  if test -z "$f77temp"; then
    f77temp=gfortran
  fi
  # make dummy test programs
  echo "#include <iostream>"   > conftest.cc
  echo "using namespace std;" >> conftest.cc
  echo "int main ()"          >> conftest.cc
  echo "{"                    >> conftest.cc
  echo "  cout << endl;"      >> conftest.cc
  echo "  return 0;"          >> conftest.cc
  echo "}"                    >> conftest.cc
  echo "      PROGRAM MAIN"    > conftest.f
  echo "      END"            >> conftest.f
  case `uname` in
    Darwin*)
      $cxxtemp -static-libgcc -static-libstdc++ \
        -shared -o conftest.dylib conftest.cc && test -z \
        "`otool -L conftest.dylib | grep libstdc++`" && \
        enable_matlab_static=yes
      ;;
    MINGW*)
      $cxxtemp -static -shared -o conftest.dll \
        conftest.cc && test -z "`objdump -p conftest.dll | \
        grep libstdc++`" && enable_matlab_static=yes
      ;;
    Linux*)
      # also need to test if libgfortran.a is -fPIC on Linux
      $cxxtemp -fPIC -static-libgcc -static-libstdc++ \
        -shared -o conftest.so conftest.cc && test -z \
        "`objdump -p conftest.so | grep libstdc++`" && \
        $f77temp -fPIC -shared -o conftest.so conftest.f \
        `$f77temp -print-file-name=libgfortran.a` && \
        enable_matlab_static=yes
      ;;
  esac
  rm -f conftest*
fi

# Set configure flags which depend on enable_matlab_static
if test x"$enable_matlab_static" = xyes; then
  ADD_FFLAGS="$ADD_FFLAGS -static-libgcc"
fi
case `uname` in
  MINGW*)
    if test x"$enable_matlab_static" = xyes; then
      CDEFS="$CDEFS -DWITHOUT_PTHREAD=1"
    else
      ADD_FFLAGS="$ADD_FFLAGS -static-libgcc"
    fi
    ;;
esac

if test x"$enable_matlab_ma57" = xyes; then
# To use Matlab's MA57, have to determine MATLAB_HOME and MEXSUFFIX;
# this bit is adapted from the Matlab section of Ipopt configure.
  if test -z "$with_matlab_home"; then
    with_matlab_home=`which matlab 2>/dev/null`
    if test -L "$with_matlab_home"; then
      # matlab is a symbolic link, follow it
      with_matlab_home=`ls -l "$with_matlab_home" | awk '{print $NF}'`
    fi
    # remove bin/matlab$EXEEXT using dirname instead of sed
    # (don't know $EXEEXT yet in this site script)
    with_matlab_home=`dirname "$(dirname "$with_matlab_home")"`
  fi
  case `uname` in
    MINGW*)
      # MinGW cannot execute .bat files natively, so use cmd /c
      MEXSUFFIX=$(cd "$with_matlab_home/bin"; cmd /c mexext.bat)
      # Also get short DOS form of with_matlab_home to avoid spaces in paths
      with_matlab_home=$(cd "$with_matlab_home"; cmd /c 'for %i in (.) do @echo %~fsi' | \
        sed 's|\\|/|g') # replace backslashes with forward slashes
      ;;
    CYGWIN*)
      # need to strip trailing carriage return from mexext result in Cygwin
      MEXSUFFIX=`"$with_matlab_home/bin/mexext.bat" | dos2unix`
      # Also get short DOS form of with_matlab_home to avoid spaces in paths
      with_matlab_home=$(cygpath -u $(cygpath -d "$with_matlab_home"))
      ;;
    *)
      MEXSUFFIX=`$with_matlab_home/bin/mexext`
      ;;
  esac
  case $MEXSUFFIX in
    mexglx)
      # not tested
      with_hsl_lib="-L$with_matlab_home/bin/glnx86 -lmwma57"
      ;;
    mexa64)
      with_hsl_lib="-L$with_matlab_home/bin/glnxa64 -lmwma57"
      ;;
    mexmac)
      # not tested
      with_hsl_lib="-L$with_matlab_home/bin/mac -lmwma57"
      ;;
    mexmaci)
      # not tested
      with_hsl_lib="-L$with_matlab_home/bin/maci -lmwma57"
      ;;
    mexmaci64)
      with_hsl_lib="-L$with_matlab_home/bin/maci64 -lmwma57"
      ;;
    mexs64)
      # not tested
      with_hsl_lib="-L$with_matlab_home/bin/sol64 -lmwma57"
      ;;
    mexw32)
      with_hsl_lib="-L$with_matlab_home/bin/win32 -lmwma57"
      if test x"$enable_matlab_static" = xyes; then
        with_hsl_lib="-L$with_matlab_home/bin/win32 -Wl,-Bdynamic,-lmwma57,-Bstatic"
      fi
      ;;
    mexw64)
      with_hsl_lib="-L$with_matlab_home/bin/win64 -lmwma57"
      if test x"$enable_matlab_static" = xyes; then
        with_hsl_lib="-L$with_matlab_home/bin/win64 -Wl,-Bdynamic,-lmwma57,-Bstatic"
      fi
      ;;
    *)
      # something unexpected, either too old or too new?
      ;;
  esac
  CXXDEFS="$CXXDEFS -DFUNNY_MA57_FINT"
  if ! test x"$prefix" = xNONE -o -e $prefix/include/coin/CoinHslConfig.h; then
    mkdir -p $prefix/include/coin
    echo "#define COINHSL_HAS_MA57 1" > $prefix/include/coin/CoinHslConfig.h
    # also fix Fortran naming convention on Windows
    # (no trailing underscores in libmwma57.dll)
    case $MEXSUFFIX in
      mexw32 | mexw64)
        echo "#define ma57ad_ ma57ad" >> $prefix/include/coin/CoinHslConfig.h
        echo "#define ma57bd_ ma57bd" >> $prefix/include/coin/CoinHslConfig.h
        echo "#define ma57cd_ ma57cd" >> $prefix/include/coin/CoinHslConfig.h
        echo "#define ma57ed_ ma57ed" >> $prefix/include/coin/CoinHslConfig.h
        echo "#define ma57id_ ma57id" >> $prefix/include/coin/CoinHslConfig.h
        ;;
    esac
  fi
  with_hsl_incdir=$prefix/include/coin
fi
